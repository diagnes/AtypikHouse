<?php

namespace AtypikHouseBundle\Entity;

use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Doctrine\ORM\Mapping as ORM;
use ToolsBundle\DataTrait\DateTrait;
use ToolsBundle\DataTrait\DeletedDateTrait;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 * StaticPage
 *
 * @ORM\Table(name="static_page")
 * @UniqueEntity("slug")
 * @ORM\Entity(repositoryClass="AtypikHouseBundle\Repository\StaticPageRepository")
 */
class StaticPage
{
    use DateTrait;
    use DeletedDateTrait;

    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @Gedmo\Slug(fields={"name"})
     *
     * @ORM\Column(name="slug", type="string", length=100, unique=true)
     */
    private $slug;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=100)
     */
    private $name;

    /**
     * @var string
     *
     * @ORM\Column(name="content", type="text")
     */
    private $content;

    /**
     * @var bool
     *
     * @ORM\Column(name="enabled", type="boolean", nullable=true, options={"default" : 0})
     */
    private $enabled;

    /**
     * @var string
     *
     * @ORM\Column(name="description", type="text")
     */
    private $description;

    /**
     * Get a Id
     *
     * @return int
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * Set a Id
     *
     * @param int $id Set a new id
     *
     * @return StaticPage
     */
    public function setId(int $id): StaticPage
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Get a Slug
     *
     * @return string
     */
    public function getSlug(): ?string
    {
        return $this->slug;
    }

    /**
     * Set a Slug
     *
     * @param string $slug Set a new slug
     *
     * @return StaticPage
     */
    public function setSlug(string $slug): StaticPage
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * Get a Name
     *
     * @return string
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Set a Name
     *
     * @param string $name Set a new name
     *
     * @return StaticPage
     */
    public function setName(string $name): StaticPage
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get a Content
     *
     * @return string
     */
    public function getContent(): ?string
    {
        return $this->content;
    }

    /**
     * Set a Content
     *
     * @param string $content Set a new content
     *
     * @return StaticPage
     */
    public function setContent(string $content): StaticPage
    {
        $this->content = $content;

        return $this;
    }

    /**
     * Get a Enabled
     *
     * @return bool
     */
    public function isEnabled(): ?bool
    {
        return $this->enabled;
    }

    /**
     * Set a Enabled
     *
     * @param bool $enabled Set a new enabled
     *
     * @return StaticPage
     */
    public function setEnabled(bool $enabled): StaticPage
    {
        $this->enabled = $enabled;

        return $this;
    }

    /**
     * Get a Description
     *
     * @return string
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Set a Description
     *
     * @param string $description Set a new description
     *
     * @return StaticPage
     */
    public function setDescription(string $description): StaticPage
    {
        $this->description = $description;

        return $this;
    }
}

